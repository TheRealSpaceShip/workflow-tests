name: 'Test'

on:
  push:
    tags:
    - 'v*.*.*-base'
  workflow_dispatch:
    inputs:
      hubVersion:
        description: 'Hub CLI release version. Use "latest" or release number (ex. 1.0.0).'
        required: true
        default: 'latest'
      hubStateVersion:
        description: 'Hub State release version. Use "latest" or release number (ex. 1.0.0).'
        required: true
        default: 'latest'
      hubExtRef:
        description: 'Hub Extensions git ref.'
        required: true
        default: 'stable'
      hubExtCommit:
        description: 'Hub Extensions commit hash. If empty Hub Extensions git ref is used.'
        required: false
        default: ''
      customTag:
        description: 'Custom base image tag.'
        required: true

jobs:
  build:
    runs-on: 'ubuntu-latest'

    steps:
      - id: 'versions'
        name: 'Calculate versions'
        run: |
          HUB_CTL_VERSION="${{ github.event.inputs.hubVersion }}"
          if test "$HUB_CTL_VERSION" = "latest"; then
            HUB_CTL_VERSION=$(curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/epam/hubctl/releases/latest" | jq -crM '.tag_name | select(.)' | cut -c 2-)
            if test -z "$HUB_CTL_VERSION"; then
              echo "Hub CLI version can't be empty"
              exit 1
            fi
          fi
          HUB_STATE_VERSION="${{ github.event.inputs.hubStateVersion }}"
          if test "$HUB_STATE_VERSION" = "latest"; then
            HUB_STATE_VERSION=$(curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/epam/hub-state/releases/latest" | jq -crM '.tag_name | select(.)' | cut -c 2-)
            if test -z "$HUB_STATE_VERSION"; then
              echo "Hub State extension version can't be empty"
              exit 1
            fi
          fi
          HUB_EXTENSIONS_VERSION=$(git ls-remote -q https://github.com/epam/hub-extensions.git "${{ github.event.inputs.hubExtRef || stable }}" 2>/dev/null | cut -c-7)

          echo "HUB_CTL_VERSION=$HUB_CTL_VERSION" >> $GITHUB_ENV
          echo "HUB_EXTENSIONS_VERSION=$HUB_EXTENSIONS_VERSION" >> $GITHUB_ENV
          echo "HUB_STATE_VERSION=$HUB_STATE_VERSION" >> $GITHUB_ENV

      - name: 'Outputs'
        run: |
          echo "HUB CLI: ${{ steps.versions.outputs.hubVersion }}"
          echo "HUB Extensions: ${{ github.event.inputs.hubExtCommit || steps.versions.outputs.hubExtVersion }}"
          echo "HUB State: ${{ steps.versions.outputs.hubStateVersion }}"
